function drawChart2(firstAge, endAge, foliName, firstMonth) {
        

    var dataValues = [
        // De 12.1 a 12.12
        [12.1, 323589], //0
        [12.2, 321690], //1
        [12.3, 319801], //2
        [12.4, 317922], //3
        [12.5, 316051], //4
        [12.6, 314190], //5
        [12.7, 312339], //6
        [12.8, 310496], //7
        [12.9, 308663], //8
        [12.10, 306839], //9
        [12.11, 305024], //10
        [12.12, 303218], //11

        // De 13.1 a 13.12
        [13.1, 301421], //12
        [13.2, 299633], //13
        [13.3, 297854], //14
        [13.4, 296084], //15
        [13.5, 294322], //16
        [13.6, 292570], //17
        [13.7, 290826], //18
        [13.8, 289091], //19
        [13.9, 287364], //20
        [13.10, 285646], //21
        [13.11, 283937], //22
        [13.12, 282236], //23

        // De 14.1 a 14.12
        [14.1, 280543], //24
        [14.2, 278859], //25
        [14.3, 277184], //26
        [14.4, 275517], //27
        [14.5, 273858], //28
        [14.6, 272207], //29
        [14.7, 270565], //30
        [14.8, 268931], //31
        [14.9, 267305], //32
        [14.10, 265687], //33
        [14.11, 264077], //34
        [14.12, 262475], //35

        // De 15.1 a 15.12
        [15.1, 260882], //36
        [15.2, 259296], //37
        [15.3, 257718], //38
        [15.4, 256148], //39
        [15.5, 254586], //40
        [15.6, 253032], //41
        [15.7, 251485], //42
        [15.8, 249946], //43
        [15.9, 248415], //44
        [15.10, 246892], //45
        [15.11, 245376], //46
        [15.12, 243867], //47

        // De 16.1 a 16.12
        [16.1, 242367], //48
        [16.2, 240873], //49
        [16.3, 239388], //50
        [16.4, 237909], //51
        [16.5, 236438], //52
        [16.6, 234975], //53
        [16.7, 233519], //54
        [16.8, 232070], //55
        [16.9, 230628], //56
        [16.10, 229193], //57
        [16.11, 227766], //58
        [16.12, 226346], //59

        // De 17.1 a 17.12
        [17.1, 224933], //60
        [17.2, 223527], //61
        [17.3, 222128], //62
        [17.4, 220736], //63
        [17.5, 219351], //64
        [17.6, 217973], //65
        [17.7, 216602], //66
        [17.8, 215238], //67
        [17.9, 213881], //68
        [17.10, 212530], //69
        [17.11, 211186], //70
        [17.12, 209849], //71

        // De 18.1 a 18.12
        [18.1, 208519], //72
        [18.2, 207195], //73
        [18.3, 205878], //74
        [18.4, 204568], //75
        [18.5, 203264], //76
        [18.6, 201967], //77
        [18.7, 200676], //78
        [18.8, 199392], //79
        [18.9, 198114], //80
        [18.10, 196843], //81
        [18.11, 195578], //82
        [18.12, 194319], //83

        // De 19.1 a 19.12
        [19.1, 193067], //84
        [19.2, 191821], //85
        [19.3, 190581], //86
        [19.4, 189348], //87
        [19.5, 188121], //88
        [19.6, 186900], //89
        [19.7, 185685], //90
        [19.8, 184476], //91
        [19.9, 183273], //92
        [19.10, 182077], //93
        [19.11, 180886], //94
        [19.12, 179702], //95

        // De 20.1 a 20.12
        [20.1, 178523], //96
        [20.2, 177350], //97
        [20.3, 176184], //98
        [20.4, 175023], //99
        [20.5, 173868], //100
        [20.6, 172719], //101
        [20.7, 171575], //102
        [20.8, 170438], //103
        [20.9, 169306], //104
        [20.10, 168180], //105
        [20.11, 167059], //106
        [20.12, 165945], //107

        // De 21.1 a 21.12
        [21.1, 164836], //108
        [21.2, 163732], //109
        [21.3, 162634], //110
        [21.4, 161542], //111
        [21.5, 160455], //112
        [21.6, 159374], //113
        [21.7, 158298], //114
        [21.8, 157228], //115
        [21.9, 156163], //116
        [21.10, 155103], //117
        [21.11, 154049], //118
        [21.12, 153000], //119

        // De 22.1 a 22.12
        [22.1, 151957], //120
        [22.2, 150919], //121
        [22.3, 149886], //122
        [22.4, 148858], //123
        [22.5, 147836], //124
        [22.6, 146819], //125
        [22.7, 145807], //126
        [22.8, 144800], //127
        [22.9, 143798], //128
        [22.10, 142801], //129
        [22.11, 141810], //130
        [22.12, 140823], //131

        // De 23.1 a 23.12
        [23.1, 139842], //132
        [23.2, 138865], //133
        [23.3, 137894], //134
        [23.4, 136927], //135
        [23.5, 135966], //136
        [23.6, 135009], //137
        [23.7, 134057], //138
        [23.8, 133111], //139
        [23.9, 132169], //140
        [23.10, 131231], //141
        [23.11, 130299], //142
        [23.12, 129371], //143

        // De 24.1 a 24.12
        [24.1, 128448], //144
        [24.2, 127530], //145
        [24.3, 126617], //146
        [24.4, 125708], //147
        [24.5, 124804], //148
        [24.6, 123905], //149
        [24.7, 123010], //150
        [24.8, 122120], //151
        [24.9, 121234], //152
        [24.10, 120353], //153
        [24.11, 119476], //154
        [24.12, 118604], //155

        // De 25.1 a 25.12
        [25.1, 117737], //156
        [25.2, 116874], //157
        [25.3, 116015], //158
        [25.4, 115161], //159
        [25.5, 114312], //160
        [25.6, 113466], //161
        [25.7, 112625], //162
        [25.8, 111789], //163
        [25.9, 110957], //164
        [25.10, 110129], //165
        [25.11, 109305], //166
        [25.12, 108486], //167

        // De 26.1 a 26.12
        [26.1, 107671], //168
        [26.2, 106860], //169
        [26.3, 106053], //170
        [26.4, 105251], //171
        [26.5, 104452], //172
        [26.6, 103658], //173
        [26.7, 102868], //174
        [26.8, 102083], //175
        [26.9, 101301], //176
        [26.10, 100523], //177
        [26.11, 99750], //178
        [26.12, 98980], //179

        // De 27.1 a 27.12
        [27.1, 98215], //180
        [27.2, 97453], //181
        [27.3, 96696], //182
        [27.4, 95942], //183
        [27.5, 95193], //184
        [27.6, 94447], //185
        [27.7, 93706], //186
        [27.8, 92968], //187
        [27.9, 92234], //188
        [27.10, 91504], //189
        [27.11, 90778], //190
        [27.12, 90056], //191

        // De 28.1 a 28.12
        [28.1, 89337], //192
        [28.2, 88623], //193
        [28.3, 87912], //194
        [28.4, 87205], //195
        [28.5, 86502], //196
        [28.6, 85802], //197
        [28.7, 85106], //198
        [28.8, 84414], //199
        [28.9, 83726], //200
        [28.10, 83041], //201
        [28.11, 82360], //202
        [28.12, 81682], //203

        // De 29.1 a 29.12
        [29.1, 81009], //204
        [29.2, 80338], //205
        [29.3, 79672], //206
        [29.4, 79009], //207
        [29.5, 78349], //208
        [29.6, 77694], //209
        [29.7, 77041], //210
        [29.8, 76392], //211
        [29.9, 75747], //212
        [29.10, 75105], //213
        [29.11, 74467], //214
        [29.12, 73832], //215

        // De 30.1 a 30.12
        [30.1, 73201], //216
        [30.2, 72573], //217
        [30.3, 71948], //218
        [30.4, 71327], //219
        [30.5, 70709], //220
        [30.6, 70095], //221
        [30.7, 69484], //222
        [30.8, 68877], //223
        [30.9, 68272], //224
        [30.10, 67671], //225
        [30.11, 67074], //226
        [30.12, 66479], //227

        // De 31.1 a 31.12
        [31.1, 65888], //228
        [31.2, 65301], //229
        [31.3, 64716], //230
        [31.4, 64135], //231
        [31.5, 63557], //232
        [31.6, 62982], //233
        [31.7, 62411], //234
        [31.8, 61842], //235
        [31.9, 61277], //236
        [31.10, 60715], //237
        [31.11, 60157], //238
        [31.12, 59601], //239

        // De 32.1 a 32.12
        [32.1, 59048], //240
        [32.2, 58499], //241
        [32.3, 57953], //242
        [32.4, 57410], //243
        [32.5, 56870], //244
        [32.6, 56333], //245
        [32.7, 55799], //246
        [32.8, 55268], //247
        [32.9, 54740], //248
        [32.10, 54216], //249
        [32.11, 53694], //250
        [32.12, 53175], //251

        // De 33.1 a 33.12
        [33.1, 52660], //252
        [33.2, 52147], //253
        [33.3, 51637], //254
        [33.4, 51131], //255
        [33.5, 50627], //256
        [33.6, 50126], //257
        [33.7, 49628], //258
        [33.8, 49134], //259
        [33.9, 48642], //260
        [33.10, 48153], //261
        [33.11, 47667], //262
        [33.12, 47183], //263

        // De 34.1 a 34.12
        [34.1, 46703], //264
        [34.2, 46226], //265
        [34.3, 45751], //266
        [34.4, 45279], //267
        [34.5, 44811], //268
        [34.6, 44345], //269
        [34.7, 43882], //270
        [34.8, 43421], //271
        [34.9, 42964], //272
        [34.10, 42509], //273
        [34.11, 42057], //274
        [34.12, 41608], //275

        // De 35.1 a 35.12
        [35.1, 41162], //276
        [35.2, 40719], //277
        [35.3, 40278], //278
        [35.4, 39840], //279
        [35.5, 39405], //280
        [35.6, 38973], //281
        [35.7, 38543], //282
        [35.8, 38116], //283
        [35.9, 37692], //284
        [35.10, 37270], //285
        [35.11, 36852], //286
        [35.12, 36436], //287

        // De 36.1 a 36.12
        [36.1, 36022], //288
        [36.2, 35612], //289
        [36.3, 35204], //290
        [36.4, 34799], //291
        [36.5, 34396], //292
        [36.6, 33996], //293
        [36.7, 33599], //294
        [36.8, 33205], //295
        [36.9, 32813], //296
        [36.10, 32424], //297
        [36.11, 32037], //298
        [36.12, 31653], //299

        // De 37.1 a 37.12
        [37.1, 31272], //300
        [37.2, 30893], //301
        [37.3, 30517], //302
        [37.4, 30144], //303
        [37.5, 29773], //304
        [37.6, 29405], //305
        [37.7, 29039], //306
        [37.8, 28676], //307
        [37.9, 28316], //308
        [37.10, 27958], //309
        [37.11, 27603], //310
        [37.12, 27250], //311

        // De 38.1 a 38.12
        [38.1, 26900], //312
        [38.2, 26553], //313
        [38.3, 26208], //314
        [38.4, 25866], //315
        [38.5, 25526], //316
        [38.6, 25189], //317
        [38.7, 24854], //318
        [38.8, 24522], //319
        [38.9, 24193], //320
        [38.10, 23866], //321
        [38.11, 23541], //322
        [38.12, 23219], //323

        // De 39.1 a 39.12
        [39.1, 22900], //324
        [39.2, 22583], //325
        [39.3, 22269], //326
        [39.4, 21958], //327
        [39.5, 21648], //328
        [39.6, 21342], //329
        [39.7, 21038], //330
        [39.8, 20736], //331
        [39.9, 20437], //332
        [39.10, 20141], //333
        [39.11, 19847], //334
        [39.12, 19555], //335

        // De 40.1 a 40.12
        [40.1, 19266], //336
        [40.2, 18980], //337
        [40.3, 18696], //338
        [40.4, 18415], //339
        [40.5, 18136], //340
        [40.6, 17859], //341
        [40.7, 17585], //342
        [40.8, 17314], //343
        [40.9, 17045], //344
        [40.10, 16779], //345
        [40.11, 16515], //346
        [40.12, 16254], //347

        // De 41.1 a 41.12
        [41.1, 15995], //348
        [41.2, 15738], //349
        [41.3, 15484], //350
        [41.4, 15233], //351
        [41.5, 14984], //352
        [41.6, 14738], //353
        [41.7, 14494], //354
        [41.8, 14252], //355
        [41.9, 14013], //356
        [41.10, 13777], //357
        [41.11, 13543], //358
        [41.12, 13311], //359

        // De 42.1 a 42.12
        [42.1, 13082], //360
        [42.2, 12856], //361
        [42.3, 12632], //362
        [42.4, 12410], //363
        [42.5, 12191], //364
        [42.6, 11974], //365
        [42.7, 11760], //366
        [42.8, 11548], //367
        [42.9, 11339], //368
        [42.10, 11132], //369
        [42.11, 10928], //370
        [42.12, 10726], //371

        // De 43.1 a 43.12
        [43.1, 10526], //372
        [43.2, 10329], //373
        [43.3, 10134], //374
        [43.4, 9942], //375
        [43.5, 9752], //376
        [43.6, 9565], //377
        [43.7, 9380], //378
        [43.8, 9197], //379
        [43.9, 9017], //380
        [43.10, 8839], //381
        [43.11, 8664], //382
        [43.12, 8491], //383

        // De 44.1 a 44.12
        [44.1, 8320], //384
        [44.2, 8152], //385
        [44.3, 7986], //386
        [44.4, 7823], //387
        [44.5, 7662], //388
        [44.6, 7503], //389
        [44.7, 7346], //390
        [44.8, 7192], //391
        [44.9, 7040], //392
        [44.10, 6891], //393
        [44.11, 6743], //394
        [44.12, 6598], //395

        // De 45.1 a 45.12
        [45.1, 6455], //396
        [45.2, 6315], //397
        [45.3, 6177], //398
        [45.4, 6041], //399
        [45.5, 5907], //400
        [45.6, 5775], //401
        [45.7, 5646], //402
        [45.8, 5519], //403
        [45.9, 5394], //404
        [45.10, 5271], //405
        [45.11, 5150], //406
        [45.12, 5031], //407

        // De 46.1 a 46.12
        [46.1, 4915], //408
        [46.2, 4800], //409
        [46.3, 4688], //410
        [46.4, 4577], //411
        [46.5, 4469], //412
        [46.6, 4363], //413
        [46.7, 4258], //414
        [46.8, 4155], //415
        [46.9, 4054], //416
        [46.10, 3955], //417
        [46.11, 3858], //418
        [46.12, 3763], //419

        // De 47.1 a 47.12
        [47.1, 3669], //420
        [47.2, 3576], //421
        [47.3, 3486], //422
        [47.4, 3397], //423
        [47.5, 3310], //424
        [47.6, 3225], //425
        [47.7, 3141], //426
        [47.8, 3059], //427
        [47.9, 2979], //428
        [47.10, 2900], //429
        [47.11, 2823], //430
        [47.12, 2747], //431

        // De 48.1 a 48.12
        [48.1, 2673], //432
        [48.2, 2600], //433
        [48.3, 2529], //434
        [48.4, 2459], //435
        [48.5, 2391], //436
        [48.6, 2324], //437
        [48.7, 2259], //438
        [48.8, 2195], //439
        [48.9, 2132], //440
        [48.10, 2070], //441
        [48.11, 2010], //442
        [48.12, 1951], //443

        // De 49.1 a 49.12
        [49.1, 1893], //444
        [49.2, 1836], //445
        [49.3, 1781], //446
        [49.4, 1727], //447
        [49.5, 1674], //448
        [49.6, 1622], //449
        [49.7, 1571], //450
        [49.8, 1521], //451
        [49.9, 1472], //452
        [49.10, 1424], //453
        [49.11, 1377], //454
        [49.12, 1331], //455

        // De 50.1 a 50.12
        [50.1, 1286], //456
        [50.2, 1242], //457
        [50.3, 1199], //458
        [50.4, 1157], //459
        [50.5, 1116], //460
        [50.6, 1076], //461
        [50.7, 1037], //462
        [50.8, 999], //463
        [50.9, 961], //464
        [50.10, 924], //465
        [50.11, 888], //466
        [50.12, 853], //467
        ]
    
    let selectedDataValues = [];
    let realRow;
    let arrayIndexNumber = -1;
    let ageMonth;
    let modifiedAge;
    let indexEnd;

    console.log(endAge);

        switch (endAge) {
            case 3:

                modifiedAge = firstAge;
                ageMonth = parseFloat(`${modifiedAge}.${firstMonth}`);

                dataValues.forEach(function (element, index) {

                    if (element[0] === ageMonth) {

                        arrayIndexNumber = index;

                    }

                });

                indexEnd = arrayIndexNumber + 37;

                break;

            case 6:

                modifiedAge = firstAge + 4;
                ageMonth = parseFloat(`${modifiedAge}.${firstMonth}`);

                dataValues.forEach(function (element, index) {

                    if (element[0] === ageMonth) {

                        arrayIndexNumber = index;

                    }

                });

                indexEnd = arrayIndexNumber + 37;

                break;

            case 10:

                modifiedAge = firstAge + 10;
                ageMonth = parseFloat(`${modifiedAge}.${firstMonth}`);

                dataValues.forEach(function (element, index) {

                    if (element[0] === ageMonth) {

                        arrayIndexNumber = index;

                    }

                });

                indexEnd = arrayIndexNumber + 37;

                break;

            case 11:

                modifiedFirstAge = firstAge + 10;
                ageMonth = parseFloat(`${modifiedFirstAge}.${firstMonth}`);

                console.log(ageMonth);
                dataValues.forEach(function (element, index) {

                    if (element[0] === ageMonth) {

                        arrayIndexNumber = index;


                        console.log(arrayIndexNumber); 
                    }

                });

                indexEnd = dataValues.length;

                break;

            default:
                break;

        }

    if (endAge !== 0) {

        let modifiedFirstAge = arrayIndexNumber;

        for (let i = modifiedFirstAge; i < indexEnd; i++) {
            selectedDataValues.push(dataValues[i]);
        }

    } else {

        modifiedFirstAge = firstAge;

        ageMonth = parseFloat(`${modifiedFirstAge}.${firstMonth}`);

        console.log(ageMonth);
        dataValues.forEach(function (element, index) {

            if (element[0] === ageMonth) {

                arrayIndexNumber = index;

            }

        });

        indexEnd = dataValues.length;

        for (let i = arrayIndexNumber; i < indexEnd; i++) {
            selectedDataValues.push(dataValues[i]);
        }
    }


    //Funcion para seleccionar la edad de la persona en el grafico ( colorada en rojo )
    function highlightSelectedPoint() {
        if (realRow !== undefined && realRow >= 0 && realRow < labels.length) {
            myChart.data.datasets[0].pointBackgroundColor = Array(labels.length).fill('rgba(255,0,0,0)');
            myChart.data.datasets[0].pointBackgroundColor[realRow] = 'rgba(255, 0, 0, 1)';
            myChart.update();
        }
    }

    var labels = selectedDataValues.map(function (item) {
        return item[0];
    });

    

    var ctx = document.getElementById('myChart').getContext('2d');

    //Cambia el gradiente en base a las edades


    /*

    var gradient = ctx.createLinearGradient(0, 0, 0, windowHeight / 2.2);

    gradient.addColorStop(0, 'rgba(255, 105, 180, 1)');

    if (endAge <= 30 && endAge !== 0) {
        gradient.addColorStop(1, 'rgba(220, 169, 169, 1)');
        console.log("menos 30");
    } else if (endAge <= 40 && endAge !== 0) {
        gradient.addColorStop(1, 'rgba(160,160, 160, 1)');
        console.log("menos igual 40");
    } else if (endAge > 40) {
        gradient.addColorStop(1, 'rgba(128, 128, 128, 1)');
        console.log("mas 40");
    }

    */

    //Gradient
    let width, height, gradient;
    function getGradient(ctx, chartArea) {
        const chartWidth = chartArea.right - chartArea.left;
        const chartHeight = chartArea.bottom - chartArea.top;       

        if (!gradient || width !== chartWidth || height !== chartHeight) {
            width = chartWidth;
            height = chartHeight;
            gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);

            gradient.addColorStop(1, 'rgba(255, 105, 180, 1)');

            //if (endAge <= 30 && endAge !== 0) {
            //    gradient.addColorStop(0, 'rgba(220, 169, 169, 1)');
            //    console.log("menos 30");
            //} else if (endAge <= 40 && endAge !== 0) {
            //    gradient.addColorStop(0, 'rgba(180,160, 160, 1)');
            //    console.log("menos igual 40");
            //} else if (endAge > 40) {
                gradient.addColorStop(0, 'rgba(128, 128, 128, 1)');
                console.log("mas 40");
           /* }*/
        }

        return gradient;
    }


    // Create a datasets array for the chart
    var datasets = [{
        label: foliName,
        data: selectedDataValues.map(function (item) {
            return item[1];
        }),
        borderColor: function (context) {
            const chart = context.chart;
            const { ctx, chartArea } = chart;

            if (!chartArea) {
                return;
            }
            return getGradient(ctx, chartArea);
        },
        borderWidth: 2,
        lineTension: 0,
        backgroundColor: gradient
    }];

   

    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {           
            legend: {
                display: true
            },
            animation: {
                onComplete: function () {
                    highlightSelectedPoint();
                }
            }
        
        }
    });


}